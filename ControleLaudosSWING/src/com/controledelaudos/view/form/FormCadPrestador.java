/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.controledelaudos.view.form;

import com.controledelaudos.control.facade.PrestadorFACADE;
import com.controledelaudos.model.beans.TabPrestador;
import com.controledelaudos.view.rn.ControleDeCaracteres;
import com.controledelaudos.view.tablemodels.PrestadorTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author CMR
 */
public class FormCadPrestador extends javax.swing.JInternalFrame {

    private List<TabPrestador> listaPrestadores;
    private Integer codPrestador;
    private int linhaSelecionada;

    public FormCadPrestador() {
        initComponents();
        eventosDosBoes();
        habilitarBotoes(true);
        habilitarCampos(false);
        addListaPrestadoresNaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNomeFantasia = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCnes = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPrestadores = new javax.swing.JTable();
        barraDeBtn1 = new com.controledelaudos.view.componentes.BarraDeBtn();

        setClosable(true);
        setIconifiable(true);
        setTitle("Prestadores");

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 153)));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Insira os dados do prestador"));

        jLabel3.setText("CNES:");

        txtNomeFantasia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeFantasiaKeyTyped(evt);
            }
        });

        txtCodigo.setEnabled(false);

        jLabel2.setText("NOME FANTASIA:");

        jLabel1.setText("CÃ“DIGO:");

        txtCnes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCnesKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNomeFantasia)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCnes, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNomeFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCnes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de prestadores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel3.setToolTipText("");

        tbPrestadores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tbPrestadores);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(barraDeBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraDeBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeFantasiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeFantasiaKeyTyped
        ControleDeCaracteres.permitirSomenteTexto(evt);
    }//GEN-LAST:event_txtNomeFantasiaKeyTyped

    private void txtCnesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCnesKeyTyped
        ControleDeCaracteres.permitirSomenteNumeros(evt);
    }//GEN-LAST:event_txtCnesKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.controledelaudos.view.componentes.BarraDeBtn barraDeBtn1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbPrestadores;
    private javax.swing.JTextField txtCnes;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNomeFantasia;
    // End of variables declaration//GEN-END:variables

    private void habilitarBotoes(boolean enabled) {
        barraDeBtn1.getBtnNovo().setEnabled(enabled);
        barraDeBtn1.getBtnSalvar().setEnabled(!enabled);
        barraDeBtn1.getBtnCancelar().setEnabled(!enabled);
        limparCampos();
    }

    private void habilitarCampos(boolean enabled) {
        txtNomeFantasia.setEnabled(enabled);
        txtCnes.setEnabled(enabled);
    }

    private void limparCampos() {
        txtCodigo.setText("");
        txtNomeFantasia.setText("");
        txtCnes.setText("");
    }

    private void addListaPrestadoresNaTabela() {
        listaPrestadores = new PrestadorFACADE().listarTodosPrestadores();
        if (listaPrestadores != null) {
            tbPrestadores.setModel(new PrestadorTableModel(listaPrestadores));

        }
    }

    private boolean validarCamposNoFomulÃ¡rio() {
        String campoNome = txtNomeFantasia.getText();
        String campoCnes = txtCnes.getText();
        if ("".equals(campoNome)) {
            JOptionPane.showMessageDialog(this, "Campo `NOME FANTASIA` obrigatorio.", "Erro", JOptionPane.ERROR_MESSAGE);
            txtNomeFantasia.requestFocus();
            return false;
        } else if ("".equals(campoCnes)) {
            JOptionPane.showMessageDialog(this, "Campo `CNES` obrigatorio.", "Erro", JOptionPane.ERROR_MESSAGE);
            txtCnes.requestFocus();
            return false;
        }
        return true;
    }

    private void salvarOuAlterarPrestador() {
        if (!validarCamposNoFomulÃ¡rio()) {
            return;
        }

        String campoNomeFantasia = txtNomeFantasia.getText().toUpperCase();
        String campoCNES = txtCnes.getText();
        TabPrestador prestador = new TabPrestador();
        prestador.setNomeFantasia(campoNomeFantasia);
        prestador.setCnes(Integer.parseInt(String.valueOf(campoCNES)));

        if (codPrestador == null) {

            new PrestadorFACADE().salvarOuAtualizarPrestador(prestador);
            JOptionPane.showMessageDialog(this, "Prestador salvo com sucesso.");

        } else {
            prestador.setCodPrestador(codPrestador);
            new PrestadorFACADE().salvarOuAtualizarPrestador(prestador);
            JOptionPane.showMessageDialog(this, "Prestador atualizado com sucesso.");
            codPrestador = null;
            habilitarBotoes(true);
            habilitarCampos(false);
        }
        addListaPrestadoresNaTabela();
        limparCampos();
    }

    private boolean validarSeleÃ§Ã£oNaTabela(String msg) {
        linhaSelecionada = tbPrestadores.getSelectedRow();
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, msg);
            return false;
        }
        return true;
    }

    private void prepararParaAtualizar() {
        String msg = "Selecione um registro para atualiza-lo.";
        if (!validarSeleÃ§Ã£oNaTabela(msg)) {
            return;
        }
        habilitarCampos(true);
        habilitarBotoes(false);
        TabPrestador prestador = new PrestadorTableModel(listaPrestadores).get(linhaSelecionada);
        codPrestador = prestador.getCodPrestador();
        txtCodigo.setText(String.valueOf(prestador.getCodPrestador()));
        txtNomeFantasia.setText(prestador.getNomeFantasia());
        txtCnes.setText(String.valueOf(prestador.getCnes()));
    }

    private void excluir() {
        String msg = "Selecione um registro para remover.";
        if (!validarSeleÃ§Ã£oNaTabela(msg)) {
            return;
        }
        TabPrestador prestador = new PrestadorTableModel(listaPrestadores).get(linhaSelecionada);
        int confirm = JOptionPane.showConfirmDialog(this, "Confirmar a exclusÃ£o? A exclusÃ£o do prestador " + prestador.getNomeFantasia() + " \n"
                + "pode apagar registros em outras partes do sistema.", "Excluir prestador", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm != 0) {
            return;
        }
        new PrestadorFACADE().removerPrestador(prestador);
        this.addListaPrestadoresNaTabela();
    }

    private void eventosDosBoes() {
        //botÃ£o salvar
        barraDeBtn1.getBtnSalvar().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                salvarOuAlterarPrestador();
            }
        });
        //botÃ£o novo
        barraDeBtn1.getBtnNovo().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                habilitarBotoes(false);
                habilitarCampos(true);

            }
        });
        //botÃ£o atualizar
        barraDeBtn1.getBtnAtualizar().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                prepararParaAtualizar();
            }
        });

        //botÃ£o cancelar
        barraDeBtn1.getBtnCancelar().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                habilitarBotoes(true);
                habilitarCampos(false);
            }
        });

        //botÃ£o excluir
        barraDeBtn1.getBtnExcluir().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                excluir();
            }
        });

    }

}
